
■ ファイルデータをキャッシュすると言う事

ファイルデータをキャッシュすると言う事
　現在の実装は怪しい?
　　未だ詳細に調べた訳ではないので、他の所に原因があるのかも知れないが、
　　キャッシュを使用する様にするとファイルを読み取れたり読み取れなかったりする。
　　1. スレッド間で競合が起こっている可能性。
　　2. etc.
　　→動作が不審だと思っていたら、
　　　実は Dokan の方から CloseFile が呼び出されるタイミングが可笑しいからだという事が分かった。
　　　(実際に動作が始まる前に Close してしまう。)

データをキャッシュする仕組みを一般的に作成してみるか?
　・スレッドセーフ
　・キャッシュが一杯になったら、ディスクにもキャッシュする。
　A. データ構造
　　アドレステーブル
　　　アドレス
　　　アクセス履歴 (直近アクセス時刻、アクセス頻度)
　　　データの期限
　　ポインタテーブル
　　　データの賞味期限
　B. より詳細に
　　データソースの抽象化
　　　データの読み書き
　　　　ReadSource
　　　　WriteBack
　　　オリジナルのアクセス速度レベル
　　　　これはディスクにキャッシュするかどうか等を決めるのに使用する
　　　　元からディスク上にあるファイルを元にしている場合などは、
　　　　ディスクにキャッシュする意味はない
　　　書込可能かどうか
　　　　書込時に成功して後で WriteBack する時に失敗する、
　　　　というのは良くない。成功したという前提で物事が進んでいるかも知れない。
　　　　(例えば、データの移動の場合などにはデータが消えてしまう事になる)
　　　特定範囲のデータの期限が切れているかどうか
　　　　例えば、オリジナルに他から変更があったかどうかを確認
　　　　或いは、最終の読み込みから特定の時間が経っているかどうかを確認
　　　データソースに関するフィールド
　　　　例: 遠隔ファイルの場合
　　　　　Session/SftpOperation
　　　　　遠隔ファイル名
　　　　　データの位置
　　　　　データの長さ
　　キャッシュブロックの実装
　　　キャッシュブロックの所在について
　　　　ファイル名 (ローカルでの渾名)
　　　　データの位置
　　　　データの長さ
　　　データソース固有の情報
　　　　例えば遠隔の場合、
　　　　　ブロックの取得日時に関する情報
　　　データソースに関する情報
　　　　データの読み取り・更新
　　　　データの書込
　　　最終アクセス時刻
　　　データの変更 (オリジナルとの不一致) があるかどうか
　　特に Sftp で注意するべき事
　　　できるだけ要求・応答の回数(round trip)を少なくしたいので、
　　　連続で取得出来るデータは連続で取得すると良い
　　キャッシュテーブルの管理
　　　
　　スレッドセーフの為に注意すべき事
　　　キャッシュブロックの更新は同期的に。
　　　キャッシュブロック自体に所有権を割り当てる。
　　　この場合、単に読み取りを実行したいだけでも所有権を取得する必要がある。
　　　
　　　更に、キャッシュブロック自体を移動したり削除したりする場合には、
　　　キャッシュブロックのテーブル自体をロックする必要がある。
　　　
　　インターフェイスの決定
　　　取り敢えず、簡単な実装で凌ぐ為に、先にインターフェイスだけ決めておく
　　　…要するに、データの要求に対してデータを返す事が出来る様にすれば良い
　　　Read/Write(名前, 位置, 長さ)

■ Stream のリダイレクトについて

.NET Stream の色々な形式

  Stream A: 書き込み用
  streamA に書き込まれた内容を、その場で読み取りたい場合
  streamA で読み取った内容を、その場で streamB に書き込みたい場合
	
  RedirectWR
	
  stream の入口の種類
    Write メソッドによる書込   (受動読取)
    ファイルなどからの読み取り (能動読取)
	
  stream の出口の種類
    ファイルなどへの出力
    Read メソッドによる読み取り
	
  データ読み取り用
　
  データ書き込み用

■未実装
* ディスク上にキャッシュしてみるという事
* 異なる Fs 間のファイルの移動
　-> 進行状況プログレス・キャンセル
　-> コピー・コピー・チェック・削除
　-> 再帰

* 他のネットワークプロトコルに対する File System
  * FTP ?
    http://dobon.net/vb/dotnet/internet/ftpwebrequest.html#listdirectory
    
    読み取りのランダムアクセスは ContentOffset により可能 (?)
    書込のランダムアクセスに関しては可能かどうか不明。
    →WebRequestMethods.Ftp.AppendFile は末端に付け足すだけ。
    →REST 後に STOR すれば出来る?
      一応 ContentOffset を設定すれば FTP REST 要求後に UploadFile されるようである。
      然し、実際には対応している FTP Server は少ないらしいので、
      初めから上書きしてしまうと言う危険性がある。
    
      調べた所、REST は本当は予め設定したマーカを指定する物であるが、
      実装としてバイトオフセットをマーカとして使用する物があると言うだけに過ぎないらしい。
      なので、真面目な FTP 実装に対しては使えない事になる。
    
    ファイルサイズ設定
      ファイルサイズの設定の方法は多分存在しない。これは困る。
      
    ファイル属性変更に関して
      SITE コマンドは .NET Framework の Ftp では利用出来ない。直接 TcpClient で書く必要がある。
      http://social.msdn.microsoft.com/Forums/ja-JP/csharpexpressja/thread/ebb86baa-60b9-4cab-9a5b-c53b957c5b98  
    
  * IMAP
    http://smdn.invisiblefulmoon.net/works/libs/Smdn.Net.Imap4/doc/
    ランダムアクセス出来ないので困難。
    大量の小サイズのメールをセクタとして利用する事により、
    何とか無理矢理実現出来るかも知れないが、
    真面目にファイルシステムを構築しなければ行けないので、大変。

■現在分かっている問題点
* リンク切れシンボリックリンクが存在するディレクトリの中身は何も表示されない。
* 既に存在するディレクトリ名と同じファイル名にファイルを改名したらどうなるか?
　既に存在するディレクトリの中にファイルが移動されるかと思ったが、
　実際に試してみた所、エラーが起こってファイル名を変更する事が出来ていないという事が分かった。
　
　※ エクスプローラ上の表示では一旦同名のディレクトリが二つ表示される。
　最新の状態に更新を行うと、正しい現在のディレクトリの内容が表示されて、
　ファイル名を変更出来ていないという事が分かる。
　エラーが起こってファイル名を変更出来なかった場合には、
　戻り値に失敗した事を示す値を返すべきである。

■保留問題点
* 大量にシンボリックリンクがあるディレクトリを開くと止まる
  →これは SFTP で、readlink を、各ファイルについて一回ずつ行わなければならない事に依る。
    一応 Attribute の問い合わせがあるまでは readlink を遅延させる様にしたが、
    FindFiles の実行時には結局全て readlink しなければならない。
  A.複数のモードをマウント時に指定する事が出来る様にする
    1. シンボリックリンクを完全に解決する (ハードリンクっぽく見せる) モード
      これは、大量にシンボリックリンクを有しているディレクトリなどを開いた時に
      長く待たされる原因となる。(readlink を一つずつ行う為)
    2. シンボリックリンクを Windows ショートカットっぽく見せるモード
      →読み取り要求に対して、ショートカットとしての内容を返す様にしなければならない。
        ドライブレターなどにも注意。(windows 上でのマウントポイントを SftpFsOperation で保持)
        ショートカットっぽく見せる方法を採用する場合、ショートカットの内容を自分で構築しなければならないが、
        ショートカットは予想に反してバイナリファイルであった。
        ファイルのフォーマットが良く分からないので、暫くはこれは実現しないであろう。
    3. シンボリックリンクを Windows シンボリックリンクっぽく見せるモード
      →これだと結局 readlink が何回も行われるだけで、1. と変わりない
    4. シンボリックリンクを解決しない (謎ファイルとして表示される)　　
  B.大量にシンボリックリンクがある場合には、
    直接 ls コマンドを呼び出して
    ・-> 以降を読み取る
    ・又は、ls -L でシンボリックリンクを辿る
    という手もある。
    然し、直接コマンドを起動するのは channel を開かなければならないので重い。
    a. シンボリックリンクが沢山ある場合にのみこれを実行するようにする。
    b. 以下の内容を bash に食わせて、以後、これに要求を流し込む。
      while read line; do
        if [ "$line" == "exit" ]; then exit 0; fi
        ls -lLA --time-style=+'%s' $line
        echo "<mwg::Sshfs::TERM>"
      done
　		
      bash -c 'while read line; do if [ "$line" == "exit" ]; then exit 0; fi; ls $line; echo "<mwg::Sshfs::TERM>"; done'
* ディレクトリを readonly にすると desktop.ini を一々読みに行って遅くなる。
  a. ReadOnly モードでもディレクトリの属性には ReadOnly を設定しない。
  b. ダミーの desktop.ini を用意する。
    既存の desktop.ini がある場合は、既存の物を利用したい。
      しかし、その為には既存の desktop.ini が存在するかどうかを問い合わせなければならないので、
      結局、アクセスに時間が掛かってしまう。
    既存の desktop.ini を無視するのならば、
      desktop.ini に対する要求を何も考えずにすり返ればよいので、速度の問題は解決する。

  取り敢えずは a. の方法をとる事にする。
  (然し、何れは既定の desktop.ini を返す様な仕組みも用意したい。)

